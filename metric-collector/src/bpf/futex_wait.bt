#!/home/anon/.local/bin/bpftrace
/* Signals when a thread enters a waiting state for a futex, and when it
 * returns from waiting. 
 */

#include <linux/futex.h>


BEGIN 
/ str($2) == "debug" /
{
    @pids[$1] = 1;
}


tracepoint:syscalls:sys_enter_access
/ pid == $1 /
{
    $filename = str(args->filename);
    if ($filename != "metric-collector-new-pid") {
        return;
    }

    $new_pid = args->mode;
    if (!@pids[$new_pid]) {
        @pids[$new_pid] = 1;
    }
}

tracepoint:syscalls:sys_enter_futex 
{
    /* We want to account for all waits */
    $task = curtask->group_leader;
    $uaddr = args->uaddr;
    $root_pid = 0;
    $i = 0;
    while(($root_pid == 0) && ($i < 100)) {
        if(!(($task->flags & PF_FORKNOEXEC) && ($task->parent->pid != 1))) {
            $root_pid = $task->pid;
            break;
        }

        $task = $task->parent;
        $i += 1;
    }
    
    if ($root_pid == 0) {
        return;
    }

    if (@futex[$root_pid, $uaddr] && !@pids[pid]) {
        printf("%-15s\t%s\t%lld\n", "NewProcess", comm, pid);
        @pids[pid] = 1;
    }

    if (!@pids[pid]) {
        return;
    }

    if (!@futex[$root_pid, $uaddr]) {
        @futex[$root_pid, $uaddr] = 1;
    }
    
    $op = args->op&(~FUTEX_PRIVATE_FLAG);
    $op = $op&(~FUTEX_CLOCK_REALTIME);
    if (($op == FUTEX_WAIT_BITSET) || ($op == FUTEX_WAIT)) {
        @wait_pending[tid] = (nsecs, $root_pid, $uaddr);
    } else if (($op == FUTEX_WAKE) || ($op == FUTEX_WAKE_BITSET)) {
        @inwake[tid] = ((uint64) 1, $root_pid, $uaddr);
    } else {
        printf("%-15s\t%d\n", "UnhandledOpcode", args->op);
    }
}

tracepoint:syscalls:sys_exit_futex 
{
    if (@wait_pending[tid].0) {
        $data = @wait_pending[tid];
        $pending_contrib = $data.0 > @sample_instant ? nsecs - $data.0 : nsecs - @sample_instant;
        @wait_elapsed[tid, $data.1, $data.2] = (
            @wait_elapsed[tid, $data.1, $data.2].0 + $pending_contrib,
            @wait_elapsed[tid, $data.1, $data.2].1 + 1
        );
        delete(@wait_pending[tid]);
    } else if (@inwake[tid].0) {
        if (args->ret > 0) {
            $data = @inwake[tid];
            @wake[tid, $data.1, $data.2] = count();
        }
        delete(@inwake[tid]);
    }
}

interval:s:1
{
    printf("=> start map statistics\n");
    print(@wait_elapsed);
    print(@wait_pending);
    print(@wake);

    @sample_instant = nsecs; 
    printf("%-15s\t%lld\n", "SampleInstant", @sample_instant);
    
    printf("=> end map statistics\n");

    clear(@wait_elapsed);
    clear(@wake);
}

END {
    clear(@wait_elapsed);
    clear(@wait_pending);
    clear(@wake);
    clear(@futex);
    clear(@inwake);
}
