#!/home/anon/.local/bin/bpftrace

kfunc:vmlinux:__submit_bio
{
    $bio = args->bio;
    $bdev = $bio->bi_bdev->bd_dev;
    $part0 = $bio->bi_bdev->bd_disk->part0->bd_dev;
    $bi_iter = $bio->bi_iter;
    
    $op = $bio->bi_opf & ((1 << 8) - 1);
    $status = $bio->bi_status;
    $is_write = $op & 1;
    
    @pending[$part0, $bdev, $bi_iter.bi_sector, $is_write, $op, $status] = (nsecs, tid, pid, $bi_iter.bi_size/512);
}

kfunc:vmlinux:bio_endio
{
   
    $bio = args->bio;
    $bdev = $bio->bi_bdev->bd_dev;
    $part0 = $bio->bi_bdev->bd_disk->part0->bd_dev;
    $bi_iter = $bio->bi_iter;
    
    $op = $bio->bi_opf & ((1 << 8) - 1);
    $status = $bio->bi_status;
    $is_write = $op & 1;
   
    $start = @pending[$part0, $bdev, $bi_iter.bi_sector, $is_write, $op, $status];
    if (!$start.0) {
        return;
    }
    @completed[$part0, $bdev, $start.1, $start.2] += $start.3;
    delete(@pending[$part0, $bdev, $bi_iter.bi_sector, $is_write, $op, $status])
}

interval:s:1
{
    printf("=> start map statistics\n");
    print(@completed);
    print(@pending);

    @sample_instant = nsecs; 
    printf("%-15s\t%lld\n", "SampleInstant", @sample_instant);
    
    printf("=> end map statistics\n");

    clear(@completed);
}
