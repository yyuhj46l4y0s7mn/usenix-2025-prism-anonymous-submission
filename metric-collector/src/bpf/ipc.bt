#!/home/anon/.local/bin/bpftrace

#include <linux/stat.h>
#include <linux/fs.h>
#include <linux/net.h>
#include <linux/socket.h>
#include <net/sock.h>
#include <net/af_unix.h>

struct epoll_filefd {
	struct file *file;
	int fd;
};

struct epitem {
	union {
		struct rb_node rbn;
		struct rcu_head rcu;
	};
	struct list_head rdllink;
	struct epitem *next;
	struct epoll_filefd ffd;
};


struct eventpoll {
	struct mutex mtx;
	wait_queue_head_t wq;
	wait_queue_head_t poll_wait;
	struct list_head rdllist;
	rwlock_t lock;
	struct rb_root_cached rbr;
	struct epitem *ovflist;
	struct wakeup_source *ws;
	struct user_struct *user;
	struct file *file;
}


BEGIN 
/ str($2) == "debug" /
{
    @pids[$1] = 1;
}

/* This probe is used to register new pids. 
 * 
 * The first argument is the pid of the metric collector sending the event. The
 * new pid is extracted from the mode argument passed in via the mode system *
 * call parameter.
 */
tracepoint:syscalls:sys_enter_access
/ pid == $1 /
{
    $filename = str(args->filename);
    if ($filename != "metric-collector-new-pid") {
        return;
    }

    $new_pid = (uint32) args->mode;
    if (!@pids[$new_pid]) {
        @pids[$new_pid] = 1;
    }
}



/* 
 * STREAMS
 */
kfunc:vmlinux:vfs_read
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;

    if ((($mode & S_IFMT) == S_IFIFO) || (($mode & S_IFMT) == S_IFCHR)) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;
        $fs_id = $inode->i_sb->s_id;

        if (!@files[$s_dev, $i_id]) {
            if (@pids[pid]) {
                @files[$s_dev, $i_id] = 1;
            }
        } 

        if (!@files[$s_dev, $i_id]) {
            return;
        }

        if (!@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        @inode_pending[comm, tid, $fs_id, $s_dev, $i_id] = nsecs;
    } else if ((($mode & S_IFMT) == S_IFBLK) || (($mode & S_IFMT) == S_IFSOCK) || (($mode & S_IFMT) == S_IFREG)) {
        return; 
    } else {
        if (!@pids[pid]) {
            return;
        }
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;
        $fs_id = $inode->i_sb->s_id;

        if (!@unhandled_files[$fs_id, $s_dev, $i_id]) {
            @unhandled_files[$fs_id, $s_dev, $i_id] = 1;
            printf("%-20s\t%-15s\t%lld\t%s\t%d\t%lld\t%x\n",
                   "UnhandledFileMode", comm, tid, $fs_id, $s_dev, $i_id, ($mode & S_IFMT));
        }
    }
}

kretfunc:vmlinux:vfs_read 
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;
    $fs_id = $inode->i_sb->s_id;

    if ((($mode & S_IFMT) == S_IFIFO) || (($mode & S_IFMT) == S_IFCHR)) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;

        if (!@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]) {
            return;
        }

        $start = @inode_pending[comm, tid, $fs_id, $s_dev, $i_id];
        $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id] = (
            @inode_map[comm, tid, $fs_id, $s_dev, $i_id].0 + $pending_contrib,
            @inode_map[comm, tid, $fs_id, $s_dev, $i_id].1 + 1
        );
        delete(@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]);
    }    
}

kfunc:vmlinux:vfs_write
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;

    if ((($mode & S_IFMT) == S_IFIFO) || (($mode & S_IFMT) == S_IFCHR)) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;
        $fs_id = $inode->i_sb->s_id;

        if (!@files[$s_dev, $i_id]) {
            if (@pids[pid]) {
                @files[$s_dev, $i_id] = 1;
            }
        } 

        if (!@files[$s_dev, $i_id]) {
            return;
        }

        if (!@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        @inode_pending[comm, tid, $fs_id, $s_dev, $i_id] = nsecs;
    } else if ((($mode & S_IFMT) == S_IFBLK) || (($mode & S_IFMT) == S_IFSOCK) || (($mode & S_IFMT) == S_IFREG)) {
        return; 
    } else {
        if (!@pids[pid]) {
            return;
        }
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;
        $fs_id = $inode->i_sb->s_id;

        if (!@unhandled_files[$fs_id, $s_dev, $i_id]) {
            @unhandled_files[$fs_id, $s_dev, $i_id] = 1;
            printf("%-20s\t%-15s\t%lld\t%s\t%d\t%lld\t%x\n",
                   "UnhandledFileMode", comm, tid, $fs_id, $s_dev, $i_id, ($mode & S_IFMT));
        }
    }
}

kretfunc:vmlinux:vfs_write 
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;

    if ((($mode & S_IFMT) == S_IFIFO) || (($mode & S_IFMT) == S_IFCHR)) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;
        $fs_id = $inode->i_sb->s_id;

        if (!@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]) {
            return;
        }

        $start = @inode_pending[comm, tid, $fs_id, $s_dev, $i_id];
        $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id] = (
            @inode_map[comm, tid, $fs_id, $s_dev, $i_id].0 + $pending_contrib,
            @inode_map[comm, tid, $fs_id, $s_dev, $i_id].1 + 1
        );
        delete(@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]);
    }
}



/*
 * SOCKETS
 */
kfunc:vmlinux:__sys_connect_file
{
    if (!@pids[pid]) {
        return;
    }

    $nsecs = nsecs;
    printf("%-15s\t%s\t%lld\t%lld\n", 
           "ConnectStart", comm, tid, $nsecs);
    @start_sock[tid] = $nsecs;
}


kretfunc:vmlinux:__sys_connect_file
/ @start_sock[tid] /
{
    if (retval < 0) {
        return;
    }

    $sock = (struct socket *) args->file->private_data;
    $sk = $sock->sk;
    $inet_family = $sk->__sk_common.skc_family;

    $inode = $sk->sk_socket->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

    $nsecs = nsecs;
    $diff = $nsecs - @start_sock[tid];
    delete(@start_sock[tid]);

    if ($inet_family == AF_INET) {
        $daddr = ntop($sk->__sk_common.skc_daddr);
        $saddr = ntop($sk->__sk_common.skc_rcv_saddr);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);

        @socks_ipv4[$saddr, $lport, $daddr, $dport] = 1;

        if (!@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }

        printf("%-15s\t%-15s\t%lld\t%s\t%d\t%lld\t%s\t%s\t%d\t%s\t%d\t%lld\t%lld\n", 
               "ConnectEnd", comm, tid, $fs_id, $s_dev, $i_id, "AF_INET", $saddr, $lport, $daddr, $dport, $nsecs, $diff);
    } else if ($inet_family == AF_INET6) {
        $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
        $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);
        
        @socks_ipv6[$saddr, $lport, $daddr, $dport] = 1;

        if (!@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET6", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }

        printf("%-15s\t%-15s\t%lld\t%s\t%d\t%lld\t%s\t%s\t%d\t%s\t%d\t%lld\t%lld\n", 
               "ConnectEnd", comm, tid, $fs_id, $s_dev, $i_id, "AF_INET6", $saddr, $lport, $daddr, $dport, $nsecs, $diff);
    } else if ($inet_family == AF_UNIX) {
        $unix_sock = (struct unix_sock *) $sk - offsetof(struct unix_sock, sk);
        $peer = $unix_sock->peer;

        @socks_unix[$sk, $peer] = 1;

        if (!@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%p\t%p\tconnect\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_UNIX", $sk, $peer);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }

        printf("%-15s\t%-15s\t%lld\t%s\t%d\t%lld\t%s\t%p\t%p\t%lld\t%lld\n", 
               "ConnectEnd", comm, tid, $fs_id, $s_dev, $i_id, "AF_UNIX", $sk, $peer, $nsecs, $diff);
    } else {
        if (!@unhandled_sock[$fs_id, $s_dev, $i_id]) {
            @unhandled_sock[$fs_id, $s_dev, $i_id] = 1;
            printf("%-20s\t%-15s\t%lld\t%s\t%d\t%lld\t%d\n",
                   "UnhandledSockFam", comm, tid, $fs_id, $s_dev, $i_id, $inet_family);
        }
    }

}

kfunc:vmlinux:do_accept 
{
    if (!@pids[pid]) {
        return;
    }

    $socket = (struct socket *)args->file->private_data;
    $sk = $socket->sk;
    $inode = $sk->sk_socket->file->f_inode;
    $i_id = $inode->i_ino;
	$inet_family = $sk->__sk_common.skc_family;
    
    if ($inet_family == AF_INET) {
        $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
        $lport = $sk->__sk_common.skc_num;

        printf("%-15s\t%s\t%lld\t%s\t%lld\t%s\t%d\n", 
               "AcceptStart", comm, tid, "AF_INET", $i_id, $saddr, $lport);
    } else if ($inet_family == AF_INET6) {
        $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
        $lport = $sk->__sk_common.skc_num;

        printf("%-15s\t%s\t%lld\t%s\t%lld\t%s\t%d\n", 
               "AcceptStart", comm, tid, "AF_INET6", $i_id, $saddr, $lport);
    } else if ($inet_family == AF_UNIX) {

        // For lack of better description of what socket we are accepting on,
        // we opt for the socket's inode id, which is the field that appears
        // when listing a process' files in procfs.
        printf("%-15s\t%s\t%lld\t%s\t%s\t%lld\n", 
               "AcceptStart", comm, tid, "AF_UNIX", "socket", $i_id);
    } 

    @start_sock[tid] = nsecs;
}

kretfunc:vmlinux:do_accept
{
    if (!@pids[pid]) {
        return;
    }

    $sock = (struct socket *) retval->private_data;
    if (($sock == 0) || !@start_sock[tid]) {
        return; 
    }

    $sk = $sock->sk;
	$inet_family = $sk->__sk_common.skc_family;

    $inode = retval->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

	if ($inet_family == AF_INET) {
        $daddr = ntop($sk->__sk_common.skc_daddr);
        $saddr = ntop($sk->__sk_common.skc_rcv_saddr);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);

        @socks_ipv4[$saddr, $lport, $daddr, $dport] = 1;

        if (!@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }

        printf("%-15s\t%-15s\t%lld\t%s\t%d\t%lld\t%s\t%s\t%d\t%s\t%d\t%lld\n", 
               "AcceptEnd", comm, tid, $fs_id, $s_dev, $i_id, "AF_INET", $saddr, $lport, $daddr, $dport, nsecs);
	} else if ($inet_family == AF_INET6) {
        $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
        $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);
        
        @socks_ipv6[$saddr, $lport, $daddr, $dport] = 1;

        if (!@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET6", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }

        printf("%-15s\t%-15s\t%lld\t%s\t%d\t%lld\t%s\t%s\t%d\t%s\t%d\t%lld\n",
               "AcceptEnd", comm, tid, $fs_id, $s_dev, $i_id, "AF_INET6", $saddr, $lport, $daddr, $dport, nsecs);
    } else if ($inet_family == AF_UNIX) {
        $unix_sock = (struct unix_sock *) $sk - offsetof(struct unix_sock, sk);
        $peer = $unix_sock->peer;

        @socks_unix[$sk, $peer] = 1;

        if (!@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%p\t%p\taccept\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_UNIX", $sk, $peer);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }

        printf("%-15s\t%-15s\t%lld\t%s\t%d\t%lld\t%s\t%p\t%p\t%lld\n", 
               "AcceptEnd", comm, tid, $fs_id, $s_dev, $i_id, "AF_UNIX", $sk, $peer, nsecs);
    } else {
        if (!@unhandled_sock[$fs_id, $s_dev, $i_id]) {
            @unhandled_sock[$fs_id, $s_dev, $i_id] = 1;
            printf("%-20s\t%-15s\t%lld\t%s\t%d\t%lld\t%d\n",
                   "UnhandledSockFam", comm, tid, $fs_id, $s_dev, $i_id, $inet_family);
        }
    }

    delete(@start_sock[tid]);
}


kfunc:vmlinux:sock_recvmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

	$sk = args->sock->sk;
	$inet_family = $sk->__sk_common.skc_family;

    if ($inet_family == AF_INET) {
        $daddr = ntop($sk->__sk_common.skc_daddr);
        $saddr = ntop($sk->__sk_common.skc_rcv_saddr);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);
        
        /* 
         * If the current socket is not tracked and this process belongs to the
         * list of processes of interest, start tracking the socket.
         */ 
        if (@pids[pid] && !@socks_ipv4[$saddr, $lport, $daddr, $dport]) {
            @socks_ipv4[$saddr, $lport, $daddr, $dport] = 1;
        }

        /*
         * If the conjugate socket is currently in the tracked list, but the
         * current pid is not, we should add this process group to the list of
         * interest.
         */
        if (@socks_ipv4[$daddr, $dport, $saddr, $lport] && !@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        if (@pids[pid] && !@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }
    } else if ($inet_family == AF_INET6) {
        $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
        $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);

        /* 
         * If the current socket is not tracked and this process belongs to the
         * list of processes of interest, start tracking the socket.
         */ 
        if (@pids[pid] && !@socks_ipv6[$saddr, $lport, $daddr, $dport]) {
            @socks_ipv6[$saddr, $lport, $daddr, $dport] = 1;
        }

        /*
         * If the conjugate socket is currently in the tracked list, but the
         * current pid is not, we should add this process group to the list of
         * interest.
         */
        if (@socks_ipv6[$daddr, $dport, $saddr, $lport] && !@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        if (!@kfile_socket[$fs_id, $s_dev, $i_id] && @pids[pid]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET6", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }
    } else if ($inet_family == AF_UNIX) {
        $unix_sock = (struct unix_sock *) $sk - offsetof(struct unix_sock, sk);
        $peer = $unix_sock->peer;
        
        /* 
         * If the current socket is not tracked and this process belongs to the
         * list of processes of interest, start tracking the socket.
         */ 
        if (@pids[pid] && !@socks_unix[$sk, $peer]) {
            @socks_unix[$sk, $peer] = 1;
        }

        /*
         * If the conjugate socket is currently in the tracked list, but the
         * current pid is not, we should add this process group to the list of
         * interest.
         */
        if (@socks_unix[$peer, $sk] && !@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        if (@pids[pid] && !@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%p\t%p\trecv_msg\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_UNIX", $sk, $peer);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }
    } else {
        if (@pids[pid] && !@unhandled_sock[$fs_id, $s_dev, $i_id]) {
            @unhandled_sock[$fs_id, $s_dev, $i_id] = 1;
            printf("%-20s\t%-15s\t%lld\t%s\t%d\t%lld\t%d\n",
                   "UnhandledSockFam", comm, tid, $fs_id, $s_dev, $i_id, $inet_family);
        }
    }


    /* 
     * If with the previous statements, the current pid still isn't in the
     * tracked list of processes, then we can safely assume this is not an
     * event of interest.
     */
    if (!@pids[pid]) {
        return;
    }

    @inode_pending[comm, tid, $fs_id, $s_dev, $i_id] = nsecs;
}

kretfunc:vmlinux:sock_recvmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

    if (!@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]) {
        return;
    }

    $start = @inode_pending[comm, tid, $fs_id, $s_dev, $i_id];
    $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
    @inode_map[comm, tid, $fs_id, $s_dev, $i_id] = (
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].0 + $pending_contrib,
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].1 + 1
    );
    delete(@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]);
}

kfunc:vmlinux:inet_sendmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

	$sk = args->sock->sk;
	$inet_family = $sk->__sk_common.skc_family;

    if ($inet_family == AF_INET) {
        $daddr = ntop($sk->__sk_common.skc_daddr);
        $saddr = ntop($sk->__sk_common.skc_rcv_saddr);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);

        /* 
         * If the current socket is not tracked and this process belongs to the
         * list of processes of interest, start tracking the socket.
         */ 
        if (@pids[pid] && !@socks_ipv4[$saddr, $lport, $daddr, $dport]) {
            @socks_ipv4[$saddr, $lport, $daddr, $dport] = 1;
        }

        /*
         * If the conjugate socket is currently in the tracked list, but the
         * current pid is not, we should add this process group to the list of
         * interest.
         */
        if (@socks_ipv4[$daddr, $dport, $saddr, $lport] && !@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        if (@pids[pid] && !@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }
    }


    /* 
     * If with the previous adjustments, the current pid still isn't in the
     * tracked list of processes, then we can safely assume this is not an
     * event of interest.
     */
    if (!@pids[pid]) {
        return;
    }

    @inode_pending[comm, tid, $fs_id, $s_dev, $i_id] = nsecs;
}

kretfunc:vmlinux:inet_sendmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

    if (!@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]) {
        return;
    }

    $start = @inode_pending[comm, tid, $fs_id, $s_dev, $i_id];
    $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
    @inode_map[comm, tid, $fs_id, $s_dev, $i_id] = (
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].0 + $pending_contrib,
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].1 + 1
    );
    delete(@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]);
}

kfunc:vmlinux:inet6_sendmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

	$sk = args->sock->sk;
	$inet_family = $sk->__sk_common.skc_family;

    if ($inet_family == AF_INET6) {
        $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
        $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);

        $lport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;
        $dport = bswap($dport);

        /* 
         * If the current socket is not tracked and this process belongs to the
         * list of processes of interest, start tracking the socket.
         */ 
        if (@pids[pid] && !@socks_ipv6[$saddr, $lport, $daddr, $dport]) {
            @socks_ipv6[$saddr, $lport, $daddr, $dport] = 1;
        }

        /*
         * If the conjugate socket is currently in the tracked list, but the
         * current pid is not, we should add this process group to the list of
         * interest.
         */
        if (@socks_ipv6[$daddr, $dport, $saddr, $lport] && !@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        if (!@kfile_socket[$fs_id, $s_dev, $i_id] && @pids[pid]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%s\t%lld\t%s\t%lld\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_INET6", $saddr, $lport, $daddr, $dport);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }
    }


    /* 
     * If with the previous adjustments, the current pid still isn't in the
     * tracked list of processes, then we can safely assume this is not an
     * event of interest.
     */
    if (!@pids[pid]) {
        return;
    }

    @inode_pending[comm, tid, $fs_id, $s_dev, $i_id] = nsecs;

}

kretfunc:vmlinux:inet6_sendmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

    if (!@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]) {
        return;
    }

    $start = @inode_pending[comm, tid, $fs_id, $s_dev, $i_id];
    $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
    @inode_map[comm, tid, $fs_id, $s_dev, $i_id] = (
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].0 + $pending_contrib,
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].1 + 1
    );
    delete(@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]);
}

kfunc:vmlinux:unix*sendmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

    $sk = args->sock->sk;
	$family = $sk->__sk_common.skc_family;

    if ($family == AF_UNIX) {
        $unix_sock = (struct unix_sock *) $sk - offsetof(struct unix_sock, sk);
        $peer = $unix_sock->peer;
        
        /* 
         * If the current socket is not tracked and this process belongs to the
         * list of processes of interest, start tracking the socket.
         */ 
        if (@pids[pid] && !@socks_unix[$sk, $peer]) {
            @socks_unix[$sk, $peer] = 1;
        }

        /*
         * If the conjugate socket is currently in the tracked list, but the
         * current pid is not, we should add this process group to the list of
         * interest.
         */
        if (@socks_unix[$peer, $sk] && !@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        if (@pids[pid] && !@kfile_socket[$fs_id, $s_dev, $i_id]) {
            printf("%-15s\t%s\t%d\t%lld\t%s\t%p\t%p\tsendmsg\n",
                   "NewSocketMap", $fs_id, $s_dev, $i_id, "AF_UNIX", $sk, $peer);
            @kfile_socket[$fs_id, $s_dev, $i_id] = 1;
        }
    }

    /* 
     * If with the previous adjustments, the current pid still isn't in the
     * tracked list of processes, then we can safely assume this is not an
     * event of interest.
     */
    if (!@pids[pid]) {
        return;
    }

    @inode_pending[comm, tid, $fs_id, $s_dev, $i_id] = nsecs;
}

kretfunc:vmlinux:unix*sendmsg
{
    $inode = (struct inode *)args->sock->file->f_inode;
    $i_id = $inode->i_ino;
    $s_dev = $inode->i_sb->s_dev;
    $fs_id = $inode->i_sb->s_id;

    if (!@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]) {
        return;
    }

    $start = @inode_pending[comm, tid, $fs_id, $s_dev, $i_id];
    $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
    @inode_map[comm, tid, $fs_id, $s_dev, $i_id] = (
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].0 + $pending_contrib,
        @inode_map[comm, tid, $fs_id, $s_dev, $i_id].1 + 1
    );

    delete(@inode_pending[comm, tid, $fs_id, $s_dev, $i_id]);
}


/*
 * EPOLL
 */

kfunc:vmlinux:ep_insert 
{
    if (!@pids[pid]) {
        return;
    }

    $inode = (struct inode *)args->tfile->f_inode;
    $fs_id = $inode->i_sb->s_id;

    if ($fs_id == "anon_inodefs") {
        $name = str(args->tfile->f_path.dentry->d_name.name);
        $priv_data = args->tfile->private_data;

        if (!@epoll_anon_inode_map[args->ep, $fs_id, $name, $priv_data]) {
            @epoll_anon_inode_map[args->ep, $fs_id, $name, $priv_data] = 1;
            $epoll_cached = @epoll_map[args->ep];
            $start = @epoll_pending[args->ep];
            if ($start) {
                $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
            }

            printf("%-15s\t%-15s\t%lld\t%p\t%s\t%s\t%p\t%lld\t%lld\n",
                   "EpollAdd", comm, tid, args->ep, $fs_id, $name, args->tfile->private_data, nsecs, $epoll_cached + $pending_contrib);
        }
    } else {
        $s_dev = $inode->i_sb->s_dev;
        $i_id = $inode->i_ino;

        if (!@epoll_inode_map[args->ep, $fs_id, $s_dev, $i_id]) {
            @epoll_inode_map[args->ep, $fs_id, $s_dev, $i_id] = 1;
            $epoll_cached = @epoll_map[args->ep];
            $start = @epoll_pending[args->ep];
            if ($start) {
                $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
            }

            printf("%-15s\t%-15s\t%lld\t%p\t%s\t%d\t%lld\t%lld\t%lld\n",
                   "EpollAdd", comm, tid, args->ep, $fs_id, $s_dev, $i_id, nsecs, $epoll_cached + $pending_contrib);
        }
    }
}

kfunc:vmlinux:__ep_remove 
{
    if (!@pids[pid]) {
        return;
    }

    $epi = (struct epitem *) args->epi;
    $ffd = $epi->ffd;
    $inode = $ffd.file->f_inode;
    $fs_id = $inode->i_sb->s_id;

    if ($fs_id == "anon_inodefs") {
        $name = str($ffd.file->f_path.dentry->d_name.name);
        $priv_data = $ffd.file->private_data;

        if (@epoll_anon_inode_map[args->ep, $fs_id, $name, $priv_data]) {
            @epoll_anon_inode_map[args->ep, $fs_id, $name, $priv_data] = 1;
            $epoll_cached = @epoll_map[args->ep];
            $start = @epoll_pending[args->ep];
            if ($start) {
                $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
            }

            printf("%-15s\t%-15s\t%lld\t%p\t%s\t%s\t%p\t%lld\t%lld\n",
                   "EpollRemove", comm, tid, args->ep, $fs_id, $name, $ffd.file->private_data, nsecs, $epoll_cached + $pending_contrib);
            delete(@epoll_anon_inode_map[args->ep, $fs_id, $name, $priv_data]);
        }
    } else {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;

        if (@epoll_inode_map[args->ep, $fs_id, $s_dev, $i_id]) {
            @epoll_inode_map[args->ep, $fs_id, $s_dev, $i_id] = 1;
            $epoll_cached = @epoll_map[args->ep];
            $start = @epoll_pending[args->ep];
            if ($start) {
                $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
            }
            printf("%-15s\t%-15s\t%lld\t%p\t%s\t%d\t%lld\t%lld\t%lld\t%lld\t%lld\t%lld\n",
                   "EpollRemove", comm, tid, args->ep, $fs_id, $s_dev, $i_id, nsecs, $epoll_cached + $pending_contrib, $start, $epoll_cached, @sample_instant);
            delete(@epoll_inode_map[args->ep, $fs_id, $s_dev, $i_id]);
        }
    }
}

kfunc:vmlinux:ep_poll
{
    if (!@pids[pid]) {
        return;
    }

    $now = nsecs;
    if (@epoll_wait_depth[args->ep] == 0) {
        @epoll_pending[args->ep] = $now;
    }
    @epoll_wait_depth[args->ep] += 1;
    @inode_pending[comm, tid, "                          epoll", 0, (uint64) args->ep] = $now;
}

kretfunc:vmlinux:ep_poll
{
    if (!@pids[pid] || !@epoll_pending[args->ep]) {
        return;
    }

    $depth = @epoll_wait_depth[args->ep];
    @epoll_wait_depth[args->ep] = ($depth == 0) ? 0 : $depth - 1;

    if (@epoll_wait_depth[args->ep] > 0) {
        return;
    }

    /*
     * We are accounting for the total time waiting within this sample
     * interval. If pending was initiated before the last sample interval we do
     * not want to account for the time spent waiting before the current interval.
     */
    $start = @epoll_pending[args->ep];
    if ($start) {
        $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
    }
    @epoll_map[args->ep] = @epoll_map[args->ep] + $pending_contrib;
    delete(@epoll_pending[args->ep]);

    $epoll = "                          epoll";
    $start = @inode_pending[comm, tid, $epoll, 0, (uint64) args->ep];
    if ($start) {
        $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
    }
    @inode_map[comm, tid, $epoll, 0, (uint64) args->ep] = (
        @inode_map[comm, tid, $epoll, 0, (uint64) args->ep].0 + $pending_contrib,
        @inode_map[comm, tid, $epoll, 0, (uint64) args->ep].1 + 1
    );
    delete(@inode_pending[comm, tid, $epoll, 0, (uint64) args->ep]);

}

kfunc:vmlinux:ep_send_events
{
    if (!@pids[pid]) {
        return;
    }

    @epoll_send[tid] = args->ep;
}

kretprobe:ep_send_events
/ @epoll_send[tid] /
{
    delete(@epoll_send[tid]);
}

kprobe:ep_item_poll*
/ @epoll_send[tid] /
{
    $epi = (struct epitem *) arg0;
    $ffd = $epi->ffd;
    $inode = $ffd.file->f_inode;
    $fs_id = $inode->i_sb->s_id;

    if ($fs_id == "anon_inodefs") {
        $epoll = @epoll_send[tid];
        $name = str($ffd.file->f_path.dentry->d_name.name);
        $priv_data = $ffd.file->private_data;

        if(@epoll_anon_inode_map[$epoll, $fs_id, $name, $priv_data]) {
            return;
        }

        @epoll_anon_inode_map[$epoll, $fs_id, $name, $priv_data] = 1;
        $epoll_cached = @epoll_map[$epoll];
        $start = @epoll_pending[$epoll];
        if($start) {
            $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
        }

        printf("%-15s\t%-15s\t%lld\t%p\t%s\t%s\t%p\t%lld\t%lld\n", 
               "EpiPoll", comm, tid, @epoll_send[tid], $fs_id, $name, $ffd.file->private_data, nsecs, $epoll_cached + $pending_contrib);
    } else {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;
        $epoll = @epoll_send[tid];

        if(@epoll_inode_map[$epoll, $fs_id, $s_dev, $i_id]) {
            return;
        }

        @epoll_anon_inode_map[$epoll, $fs_id, $name, $priv_data] = 1;
        $epoll_cached = @epoll_map[$epoll];
        $start = @epoll_pending[$epoll];
        if ($start) {
            $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
        }
        @epoll_inode_map[$epoll, $fs_id, $s_dev, $i_id] = 1;

        printf("%-15s\t%-15s\t%lld\t%p\t%s\t%lld\t%lld\t%lld\t%lld\n", 
               "EpiPoll", comm, tid, @epoll_send[tid], $fs_id, $s_dev, $i_id, nsecs, $epoll_cached + $pending_contrib);
    }
}

/*
 * SELECT & POLL
 *
 * When a thread calls the select/poll system call, we will account the time
 * spent waiting for each file descriptor passed in as an argument to the
 * calling thread.
 *
 * Maps:
 *
 * `@fds[<tid>]`: The number of file desrciptors passed in to the system call,
 *     by the calling `<tid>` thread.
 * `@io_multi_idx[<tid>]`: As thread `<tid>`'s select syscall calls `__fdget`
 *     for each file, this map tracks the current index available.
 * `@io_multi[<tid>, <idx>]`: For a given thread `<tid>` and index `<idx>`,
 *     this map provides as value the files identifiers, i.e., file system
 *     name, device id, and inode id.
 * `@inode_pending[..]`: Stores the instant a thread started waiting for a
 *     `(struct file *)`.
 * `@inode_map[..]`: Computes the total time a thread waited for a 
 *     `(struct file *)` since the last interval.
 * `@files[..]`: Stores the files being monitored by the current program.
 */

kfunc:do_select
/ @pids[pid] /
{
    @fds[tid] = args->n;
    @io_multi_idx[tid] = 0;
}

kretfunc:do_select 
/ @fds[tid] / 
{
    $terminate = nsecs;
    $i = 0;
    while ($i < 512) {
        $value = @io_multi[tid, $i];

        // In case there are multiple entries for the same (struct file *),
        // `@inode_pending` will no longer have the `(struct file *)` entry
        // after the first has been accounted. 
        $start = @inode_pending[comm, tid, $value.0, $value.1, $value.2];
        if ($start) {
            $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
            @inode_map[comm, tid, $value.0, $value.1, $value.2] = (
                @inode_map[comm, tid, $value.0, $value.1, $value.2].0 + $pending_contrib,
                @inode_map[comm, tid, $value.0, $value.1, $value.2].1
            );
        }

        delete(@inode_pending[comm, tid, $value.0, $value.1, $value.2]);
        delete(@io_multi[tid, $i]);

        $i++;
        if ($i >= @fds[tid]) {
            break;
        }
    }

    delete(@fds[tid]);
    delete(@io_multi_idx[tid]);
}

kfunc:do_sys_poll
/ @pids[pid] /
{
    @fds[tid] = (int64) args->nfds;
    @io_multi_idx[tid] = 0;
}

kretfunc:do_sys_poll 
/ @fds[tid] / 
{
    $terminate = nsecs;
    $i = 0;
    while ($i < 256) {
        $value = @io_multi[tid, $i];

        // In case there are multiple entries for the same (struct file *),
        // `@inode_pending` will no longer have the `(struct file *)` entry
        // after the first has been accounted. 
        $start = @inode_pending[comm, tid, $value.0, $value.1, $value.2];
        if ($start) {
            $pending_contrib = $start > @sample_instant ? nsecs - $start : nsecs - @sample_instant;
            @inode_map[comm, tid, $value.0, $value.1, $value.2] = (
                @inode_map[comm, tid, $value.0, $value.1, $value.2].0 + $pending_contrib,
                @inode_map[comm, tid, $value.0, $value.1, $value.2].1
            );
        }

        delete(@inode_pending[comm, tid, $value.0, $value.1, $value.2]);
        delete(@io_multi[tid, $i]);

        $i++;
        if ($i >= @fds[tid]) {
            break;
        }
    }

    delete(@fds[tid]);
    delete(@io_multi_idx[tid]);
}


kretfunc:__fdget
/ @fds[tid] /
{
    if (@io_multi_idx[tid] >= @fds[tid]) {
        return;
    }

    $ret = retval;
    $file = (struct file *) ($ret & (~3));
    $fs_id = $file->f_inode->i_sb->s_id;
    $s_dev = $file->f_inode->i_sb->s_dev;
    $i_id = $file->f_inode->i_ino;

    if(!@files[$s_dev, $i_id]) {
        @files[$s_dev, $i_id] = 1;
    }

    @inode_pending[comm, tid, $fs_id, $s_dev, $i_id] = nsecs;
    @io_multi[tid, @io_multi_idx[tid]] = ($fs_id, $s_dev, $i_id);
    @io_multi_idx[tid]++;
}

/*
 * POLL
 */


interval:s:1
{
    printf("=> start map statistics\n");

    print(@inode_map);
    print(@inode_pending);
    print(@epoll_map);
    print(@epoll_pending);

    @sample_instant = nsecs; 
    printf("%-15s\t%lld\n", "SampleInstant", @sample_instant);

    printf("=> end map statistics\n");

    clear(@inode_map);
    clear(@epoll_map);
}

END 
{
    clear(@start_sock);
    clear(@files);
    clear(@pids);
    clear(@socks_ipv4);
    clear(@socks_ipv6);
    clear(@socks_unix);
    clear(@kfile_socket);
}
